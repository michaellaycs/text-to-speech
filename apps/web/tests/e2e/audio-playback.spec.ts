import { test, expect } from '@playwright/test';

test.describe('Audio Playback Workflow', () => {
  test.beforeEach(async ({ page }) => {
    // Start from the home page
    await page.goto('/');
    
    // Wait for the page to load completely
    await page.waitForLoadState('networkidle');
  });

  test('complete text-to-audio workflow with custom audio player', async ({ page }) => {
    // Step 1: Enter text content
    const textArea = page.getByRole('textbox');
    await textArea.fill('This is a test comedy material for TTS conversion.');
    
    // Verify character count updates
    await expect(page.getByText('53/2000 characters')).toBeVisible();
    
    // Step 2: Convert text to speech
    const convertButton = page.getByRole('button', { name: /convert text to speech/i });
    await expect(convertButton).toBeEnabled();
    await convertButton.click();
    
    // Step 3: Wait for conversion to complete and audio player to appear
    await expect(page.getByTestId('audio-player')).toBeVisible({ timeout: 10000 });
    
    // Verify audio player components are present
    await expect(page.getByTestId('play-pause-button')).toBeVisible();
    await expect(page.getByTestId('time-display')).toBeVisible();
    await expect(page.getByTestId('volume-slider')).toBeVisible();
    await expect(page.getByTestId('progress-bar')).toBeVisible();
    
    // Step 4: Test audio controls
    const playButton = page.getByTestId('play-pause-button');
    const volumeSlider = page.getByTestId('volume-slider');
    
    // Test play functionality
    await playButton.click();
    
    // Wait a moment for audio to start (if available)
    await page.waitForTimeout(1000);
    
    // Test volume control
    await volumeSlider.fill('50');
    await expect(page.getByText('50%')).toBeVisible();
    
    // Test mute button
    const muteButton = page.getByTestId('mute-button');
    await muteButton.click();
    await expect(page.getByText('0%')).toBeVisible();
    
    // Unmute
    await muteButton.click();
    await expect(page.getByText('50%')).toBeVisible();
    
    // Step 5: Verify audio information is displayed
    await expect(page.getByText(/Duration:/)).toBeVisible();
    await expect(page.getByText(/Size:/)).toBeVisible();
    await expect(page.getByText(/Generated by:/)).toBeVisible();
  });

  test('audio player persistence during session', async ({ page }) => {
    // Convert text to audio
    const textArea = page.getByRole('textbox');
    await textArea.fill('Test content for persistence check.');
    
    const convertButton = page.getByRole('button', { name: /convert text to speech/i });
    await convertButton.click();
    
    // Wait for audio player to appear
    await expect(page.getByTestId('audio-player')).toBeVisible({ timeout: 10000 });
    
    // Edit text but don't convert
    await textArea.fill('Modified text content without converting.');
    
    // Audio player should still be visible with previous audio
    await expect(page.getByTestId('audio-player')).toBeVisible();
    
    // Convert new text
    await convertButton.click();
    
    // Audio player should update with new content
    await expect(page.getByTestId('audio-player')).toBeVisible({ timeout: 10000 });
  });

  test('audio player keyboard shortcuts', async ({ page }) => {
    // Setup audio
    const textArea = page.getByRole('textbox');
    await textArea.fill('Test content for keyboard shortcuts.');
    
    const convertButton = page.getByRole('button', { name: /convert text to speech/i });
    await convertButton.click();
    
    await expect(page.getByTestId('audio-player')).toBeVisible({ timeout: 10000 });
    
    // Focus on audio player
    const audioPlayer = page.getByTestId('audio-player');
    await audioPlayer.click();
    
    // Test spacebar for play/pause
    await page.keyboard.press('Space');
    
    // Test arrow keys for seek (should not throw errors)
    await page.keyboard.press('ArrowLeft');
    await page.keyboard.press('ArrowRight');
    
    // Test volume keys
    await page.keyboard.press('ArrowUp');
    await page.keyboard.press('ArrowDown');
    
    // Test mute key
    await page.keyboard.press('KeyM');
    
    // Test home/end keys
    await page.keyboard.press('Home');
    await page.keyboard.press('End');
    
    // Verify audio player is still functional after keyboard interactions
    await expect(page.getByTestId('play-pause-button')).toBeVisible();
  });

  test('audio player responsive design', async ({ page }) => {
    // Test on mobile viewport
    await page.setViewportSize({ width: 375, height: 667 });
    
    const textArea = page.getByRole('textbox');
    await textArea.fill('Mobile responsive test content.');
    
    const convertButton = page.getByRole('button', { name: /convert text to speech/i });
    await convertButton.click();
    
    await expect(page.getByTestId('audio-player')).toBeVisible({ timeout: 10000 });
    
    // Verify all controls are visible and accessible on mobile
    await expect(page.getByTestId('play-pause-button')).toBeVisible();
    await expect(page.getByTestId('volume-slider')).toBeVisible();
    await expect(page.getByTestId('progress-bar')).toBeVisible();
    
    // Test touch interactions
    const playButton = page.getByTestId('play-pause-button');
    await playButton.tap();
    
    const volumeSlider = page.getByTestId('volume-slider');
    await volumeSlider.tap();
  });

  test('audio player error handling', async ({ page }) => {
    // Intercept audio requests to simulate network errors
    await page.route('**/api/audio/**', route => {
      route.abort('failed');
    });
    
    const textArea = page.getByRole('textbox');
    await textArea.fill('Test content for error handling.');
    
    const convertButton = page.getByRole('button', { name: /convert text to speech/i });
    await convertButton.click();
    
    // Should handle conversion errors gracefully
    // The exact behavior depends on how TTS errors are handled
    // But the page should not crash and should show appropriate error messages
    
    // Wait for either success or error state
    await page.waitForTimeout(5000);
    
    // Page should remain functional
    await expect(textArea).toBeVisible();
    await expect(convertButton).toBeVisible();
  });

  test('audio player accessibility features', async ({ page }) => {
    const textArea = page.getByRole('textbox');
    await textArea.fill('Accessibility test content.');
    
    const convertButton = page.getByRole('button', { name: /convert text to speech/i });
    await convertButton.click();
    
    await expect(page.getByTestId('audio-player')).toBeVisible({ timeout: 10000 });
    
    // Check ARIA labels and roles
    const audioPlayer = page.getByTestId('audio-player');
    await expect(audioPlayer).toHaveAttribute('role', 'application');
    await expect(audioPlayer).toHaveAttribute('aria-label', 'Audio player');
    
    const playButton = page.getByTestId('play-pause-button');
    await expect(playButton).toHaveAttribute('aria-label');
    
    const muteButton = page.getByTestId('mute-button');
    await expect(muteButton).toHaveAttribute('aria-label');
    
    const volumeSlider = page.getByTestId('volume-slider');
    await expect(volumeSlider).toHaveAttribute('aria-label', 'Volume');
    
    const progressBar = page.getByTestId('progress-bar');
    await expect(progressBar).toHaveAttribute('role', 'slider');
    await expect(progressBar).toHaveAttribute('aria-label', 'Seek');
    
    // Test keyboard navigation
    await audioPlayer.focus();
    await page.keyboard.press('Tab');
    await page.keyboard.press('Tab');
    await page.keyboard.press('Tab');
    
    // Should be able to navigate through all interactive elements
    const focusedElement = page.locator(':focus');
    await expect(focusedElement).toBeVisible();
  });

  test('audio player performance - playback start time', async ({ page }) => {
    const textArea = page.getByRole('textbox');
    await textArea.fill('Performance test content for playback timing.');
    
    const convertButton = page.getByRole('button', { name: /convert text to speech/i });
    await convertButton.click();
    
    await expect(page.getByTestId('audio-player')).toBeVisible({ timeout: 10000 });
    
    // Measure time from click to play state change
    const playButton = page.getByTestId('play-pause-button');
    
    const startTime = Date.now();
    await playButton.click();
    
    // Wait for play state to change (button text/icon should change)
    // This should happen within 1 second as per AC requirement
    await page.waitForTimeout(100); // Brief wait to allow state change
    
    const endTime = Date.now();
    const playbackStartTime = endTime - startTime;
    
    // Verify playback start time is under 1 second (1000ms)
    // Note: This is a basic check - actual audio playback timing may vary
    expect(playbackStartTime).toBeLessThan(1000);
    
    // Verify play button state changed
    await expect(playButton).toBeVisible();
  });

  test('audio player with different audio sources', async ({ page }) => {
    // Test 1: Regular text conversion
    const textArea = page.getByRole('textbox');
    await textArea.fill('First audio test content.');
    
    const convertButton = page.getByRole('button', { name: /convert text to speech/i });
    await convertButton.click();
    
    await expect(page.getByTestId('audio-player')).toBeVisible({ timeout: 10000 });
    
    // Test 2: Convert different content to verify player updates
    await textArea.clear();
    await textArea.fill('Second different audio content for testing player updates.');
    
    await convertButton.click();
    
    // Audio player should update with new content
    await expect(page.getByTestId('audio-player')).toBeVisible({ timeout: 10000 });
    
    // Verify audio information updates
    await expect(page.getByText(/Duration:/)).toBeVisible();
    
    // Test 3: Short content
    await textArea.clear();
    await textArea.fill('Short.');
    
    await convertButton.click();
    
    await expect(page.getByTestId('audio-player')).toBeVisible({ timeout: 10000 });
    
    // Test 4: Longer content
    await textArea.clear();
    await textArea.fill('This is a much longer piece of content that will test the audio player with extended audio files and longer duration content to ensure it handles various content lengths appropriately.');
    
    await convertButton.click();
    
    await expect(page.getByTestId('audio-player')).toBeVisible({ timeout: 10000 });
  });
});